{"version":3,"sources":["lib/FocusPointImage.tsx","App.tsx","index.js"],"names":["Wrapper","styled","div","Img","img","$displayImage","$animate","$focusX","$focusY","$minWidth","$minHeight","$maxWidth","$maxHeight","FocusPointImage","src","alt","focusPoint","animate","minWidth","minHeight","maxWidth","maxHeight","useState","didLoad","setDidLoad","onLoad","draggable","Boolean","Container","ControlSection","section","ImageWrapper","getComponent","point","App","setPoint","size","setSize","type","min","max","value","step","onInput","event","Number","currentTarget","style","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0010b8ce.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n`;\n\ntype ImageProps = {\n  src: string;\n  $displayImage: boolean;\n  $animate: boolean;\n  $focusX?: number;\n  $focusY?: number;\n  $minWidth?: number;\n  $minHeight?: number;\n  $maxWidth?: number;\n  $maxHeight?: number;\n};\n\nconst Img = styled.img<ImageProps>`\n  opacity: ${({ $displayImage }) => ($displayImage ? 1 : 0)};\n  transition: ${({ $animate }) => ($animate ? 'opacity ease 0.5s' : 'none')};\n  object-fit: cover;\n  object-position: ${({ $focusX, $focusY }) =>\n    $focusX && $focusY ? `${$focusX}% ${$focusY}%` : \"50% 50%\"};\n  ${({ $minWidth }) => $minWidth && `min-width: ${$minWidth}px`};\n  ${({ $minHeight }) => $minHeight && `min-height: ${$minHeight}px`};\n  ${({ $maxWidth }) => $maxWidth && `max-width: ${$maxWidth}px`};\n  ${({ $maxHeight }) => $maxHeight && `max-height: ${$maxHeight}px`};\n  width: 100%;\n  height: 100%;\n`;\n\ntype Props = {\n  src: string;\n  alt?: string;\n  focusPoint?: [number, number];\n  animate?: boolean;\n  minWidth?: number;\n  minHeight?: number;\n  maxWidth?: number;\n  maxHeight?: number;\n};\n\nconst FocusPointImage: React.FunctionComponent<Props> = ({\n  src,\n  alt,\n  focusPoint,\n  animate,\n  minWidth,\n  minHeight,\n  maxWidth,\n  maxHeight,\n}: Props) => {\n  const [didLoad, setDidLoad] = useState<boolean>(false);\n  return (\n    <Wrapper>\n      <Img\n        src={src}\n        alt={alt}\n        onLoad={() => setDidLoad(true)}\n        draggable={false}\n        $displayImage={didLoad}\n        $animate={Boolean(animate)}\n        $focusX={focusPoint && focusPoint[0]}\n        $focusY={focusPoint && focusPoint[1]}\n        $minWidth={minWidth}\n        $minHeight={minHeight}\n        $maxWidth={maxWidth}\n        $maxHeight={maxHeight}\n      />\n    </Wrapper>\n  );\n};\n\nexport default FocusPointImage;\n","import { useState } from \"react\";\nimport \"./index.css\";\nimport styled from \"styled-components\";\nimport FocusPointImage from \"./lib\";\n\nconst Container = styled.div`\n  h2, p {\n    margin: 8px 8px 20px;\n  }\n  i {\n    font-size: smaller;\n  }\n`;\n\nconst ControlSection = styled.section`\n  display: flex;\n  align-items: center;\n  margin: 8px;\n  span {\n    font-size: smaller;\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst getComponent = (point: [number, number]) => (\n  <FocusPointImage\n    src=\"parrot.jpg\"\n    alt=\"A parrot\"\n    focusPoint={point}\n    animate\n  />\n);\n\nfunction App() {\n  const [point, setPoint] = useState<[number, number]>([62, 22.5]);\n  const [size, setSize] = useState<[number, number]>([75, 20])\n  return (\n    <Container>\n      <h2>react-focus-point-image demo</h2>\n      <p>\n        Focus is set on one object in an image. When the aspect ratio of the\n        image container changes responsively, the focused part of the image will\n        always be visible.\n      </p>\n      <p>\n        <i>\n          Initially, focus is set on the eye of the parrot. Play around with the\n          container size in order to see how the image changes and how the focus at\n          the eye is always kept.\n        </i>\n      </p>\n      <ControlSection>\n        Set container width:\n        <input\n          type=\"range\"\n          min=\"1\"\n          max=\"100\"\n          value={size[0]}\n          step=\"0.5\"\n          onInput={(event: React.FormEvent<HTMLInputElement>) =>\n            setSize([Number(event.currentTarget.value), size[1]])\n          }\n        />\n        <span>{size[0]}</span>\n      </ControlSection>\n      <ControlSection>\n        Set container height:\n        <input\n          type=\"range\"\n          min=\"1\"\n          max=\"100\"\n          value={size[1]}\n          step=\"0.5\"\n          onInput={(event: React.FormEvent<HTMLInputElement>) =>\n            setSize([size[0], Number(event.currentTarget.value)])\n          }\n        />\n        <span>{size[1]}</span>\n      </ControlSection>\n      <ControlSection>\n        Set focus point x:\n        <input\n          type=\"range\"\n          min=\"1\"\n          max=\"100\"\n          value={point[0]}\n          step=\"0.5\"\n          onInput={(event: React.FormEvent<HTMLInputElement>) =>\n            setPoint([Number(event.currentTarget.value), point[1]])\n          }\n        />\n        <span>{point[0]}</span>\n      </ControlSection>\n      <ControlSection>\n        Set focus point y:\n        <input\n          type=\"range\"\n          min=\"1\"\n          max=\"100\"\n          value={point[1]}\n          step=\"0.5\"\n          onInput={(event: React.FormEvent<HTMLInputElement>) =>\n            setPoint([point[0], Number(event.currentTarget.value)])\n          }\n        />\n        <span>{point[1]}</span>\n      </ControlSection>\n\n      <ImageWrapper>\n        <div style={{ width: `${size[0]}vw`, height: `${size[1]}vh` }}>\n          {getComponent(point)}\n        </div>\n      </ImageWrapper>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}